plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
//    id 'dagger.hilt.android.plugin'
   // id 'com.google.gms.google-services'
}

/*android {
    namespace 'com.wms.panchkula'
    compileSdk 33

    def isDevelopment = project.hasProperty("isDevelopment") ? project.isDevelopment.toBoolean() : false
    def isDevelopmentForClient = project.hasProperty("isDevelopmentForClient") ? project.isDevelopmentForClient.toBoolean() : false
    def testVersionName = project.hasProperty("testVersionName") ? project.testVersionName : "1.0.0"
    def liveVersionName = project.hasProperty("liveVersionName") ? project.liveVersionName : "1.0.0"

    defaultConfig {
        applicationId "com.wms.panchkula"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName = isDevelopment ? testVersionName : liveVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            debuggable true
            def appName = "sd_wms"

            def date = new Date().format("dd_MMM_yyyy") // Current date
            def date1 = new Date().format("yyyy.MM.dd") // Current date

            // Set custom APK name and version based on environment
            def apkVersion = isDevelopment ? "${appName}_v_${testVersionName}_${date}(T).apk" : "${appName}_v_${liveVersionName}_${date}(L).apk"
            def appVersion = "V - ${isDevelopment ? "$testVersionName $date1" : "$liveVersionName $date1"}"

            // Rename APK file
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (output instanceof com.android.build.gradle.internal.api.ApkVariantOutputImpl) {
                        output.outputFileName = apkVersion
                    }
                }
            }

            // Pass the flag to BuildConfig
            buildConfigField("boolean", "IS_DEVELOPMENT", isDevelopment.toString())
            buildConfigField("String", "FORCED_VERSION_NAME", "\"$appVersion\"")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures{
        viewBinding true
    }
}*/

android {
    namespace 'com.wms.panchkula'
    compileSdk 33

    def isDevelopment = project.hasProperty("isDevelopment") ? project.isDevelopment.toBoolean() : false
    def isDevelopmentForClient = project.hasProperty("isDevelopmentForClient") ? project.isDevelopmentForClient.toBoolean() : false
    def testVersionName = project.hasProperty("testVersionName") ? project.testVersionName : "1.0.0"
    def liveVersionName = project.hasProperty("liveVersionName") ? project.liveVersionName : "1.0.0"

    defaultConfig {
        applicationId "com.wms.panchkula"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName = (isDevelopment || isDevelopmentForClient) ? testVersionName : liveVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            debuggable true
            def appName = "panchkula_wms"

            def date = new Date().format("dd_MMM_yyyy") // 28_Aug_2025
            def date1 = new Date().format("yyyy.MM.dd") // 2025.08.28

            // Determine suffix based on environment
            def suffix
            if (isDevelopment) {
                suffix = "Team(T)"  // Test
            } else if (isDevelopmentForClient) {
                suffix = "Client(T)"  // Client Test
            } else {
                suffix = "(L)"  // Live
            }

            // Set custom APK name and version based on environment
            def versionNameToUse = (isDevelopment || isDevelopmentForClient) ? testVersionName : liveVersionName
            def apkVersion = "${appName}_v_${versionNameToUse}_${date}_${suffix}.apk"
            def appVersion = "V - ${versionNameToUse} ${date1}"

            // Rename APK file
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (output instanceof com.android.build.gradle.internal.api.ApkVariantOutputImpl) {
                        output.outputFileName = apkVersion
                    }
                }
            }

            // Pass flags to BuildConfig
            buildConfigField("boolean", "IS_DEVELOPMENT", isDevelopment.toString())
            buildConfigField("boolean", "IS_DEVELOPMENT_CLIENT", isDevelopmentForClient.toString())
            buildConfigField("String", "FORCED_VERSION_NAME", "\"$appVersion\"")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}


dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.recyclerview:recyclerview:1.3.1"



    //todo retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.7.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.7.0'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.4.0'
    implementation 'com.google.code.gson:gson:2.10.1'


    //todo Lifecycle components


    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'androidx.lifecycle:lifecycle-compiler:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'

    implementation "androidx.room:room-runtime:2.3.0"
    implementation 'androidx.biometric:biometric-ktx:1.2.0-alpha05'
    annotationProcessor "androidx.room:room-compiler:2.3.0"

    implementation 'com.pixplicity.easyprefs:EasyPrefs:1.10.0'

    //todo qr code scanner library
    implementation 'com.github.yuriy-budiyev:code-scanner:2.1.2'

   /* // Dagger Library
    implementation 'com.google.dagger:hilt-android:2.41'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.compose.ui:ui:1.1.1'
    kapt 'com.google.dagger:hilt-compiler:2.41'
*/
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    //todo github ...
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    //todo Sql DriverManager library...
    implementation 'net.sourceforge.jtds:jtds:1.3.1'

    //todo toast..
    implementation 'com.github.GrenderG:Toasty:1.5.0'

    //todo Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}